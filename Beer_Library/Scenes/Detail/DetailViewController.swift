//
//  DetailViewController.swift
//  Beer_Library
//
//  Created by Vitalina Nazaruk on 30.03.2023.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Kingfisher
import MapKit
import CoreLocation

protocol DetailDisplayLogic: AnyObject {
    func displayBeerDetails(viewModel: Detail.ShowDetail.ViewModel)
    func displayFavoriteButtonStatus(viewModel: Detail.SetFavoriteStatus.ViewModel)
    func displayDetails(viewModel: Detail.Details.ViewModel)
    func displayPin(viewModel: Detail.Pin.ViewModel)
    func displayGoogleMapItem(viewModel: Detail.MapItem.ViewModel)
    func displayLocation(viewModel: Detail.Location.ViewModel)
}

class DetailViewController: UIViewController, DetailDisplayLogic {
    var interactor: DetailBusinessLogic?
    var router: (NSObjectProtocol & DetailRoutingLogic & DetailDataPassing)?

    // MARK: Object lifecycle
  
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
  
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
  
    // MARK: Setup
  
    private func setup() {
        let viewController = self
        let interactor = DetailInteractor()
        let presenter = DetailPresenter()
        let router = DetailRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
  
    // MARK: Routing
  
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
          router.perform(selector, with: segue)
            }
        }
    }
  
    // MARK: View lifecycle
  
    override func viewDidLoad() {
        super.viewDidLoad()
        fetchBeerDetails()
        mapView.delegate = self
        mapView.register(MKMarkerAnnotationView.self, forAnnotationViewWithReuseIdentifier: MKMapViewDefaultAnnotationViewReuseIdentifier)
        determineCurrentLocation()
        fetchLocationPin()
    }
  
    // MARK: Detail IBOutlets
  
    @IBOutlet weak var imageBeer: UIImageView!
    @IBOutlet weak var nameBeer: UILabel!
    @IBOutlet weak var yearBeer: UILabel!
    @IBOutlet weak var taglineBeer: UILabel!
    @IBOutlet weak var descriptionBeer: UILabel!
    @IBOutlet weak var favoriteButton: UIBarButtonItem!
    @IBOutlet weak var mapView: MKMapView!
    
    var locationManager = CLLocationManager()
    
    // MARK: Beer Details
    
    func fetchBeerDetails() {
        let request = Detail.ShowDetail.Request()
        interactor?.fetchBeerDetails(request: request)
    }
    
    func fetchDetails() {
        interactor?.fetchDetails()
    }
  
    func displayBeerDetails(viewModel: Detail.ShowDetail.ViewModel) {
        nameBeer.text = viewModel.name
        yearBeer.text = viewModel.first_brewed
        imageBeer.kf.setImage(with: URL(string: viewModel.image_url))
        favoriteButton.image = viewModel.image
        title = viewModel.name
    }
    
    func displayDetails(viewModel: Detail.Details.ViewModel) {
        taglineBeer.text = viewModel.tagline
        descriptionBeer.text = viewModel.description
    }
    
    // MARK: Favorite Button
    
    @IBAction func toggleFavoriteButton(_ sender: UIBarButtonItem) {
        interactor?.checkButtonState()
    }
    
    func displayFavoriteButtonStatus(viewModel: Detail.SetFavoriteStatus.ViewModel) {
        favoriteButton.image = viewModel.isFavorite ? UIImage(systemName: "star.fill") : UIImage(systemName: "star")
    }
    
    // MARK: Location & Direction
    
    func determineCurrentLocation() {
        locationManager.delegate = self
        locationManager.requestWhenInUseAuthorization()
        locationManager.startUpdatingLocation()
    }
    
    func fetchLocationPin() {
        interactor?.fetchLocationPin()
    }
    
    func openGoogleMap() {
        interactor?.fetchGoogleMapItem()
    }

    @IBAction func tapGetDirection(_ sender: UIButton) {
        openGoogleMap()
    }
    
    func displayLocation(viewModel: Detail.Location.ViewModel) {
        let region = MKCoordinateRegion(center: viewModel.location, span: MKCoordinateSpan(latitudeDelta: 0.02, longitudeDelta: 0.02))
        mapView!.setRegion(region, animated: true)
    }
    
    func displayPin(viewModel: Detail.Pin.ViewModel) {
        mapView.addAnnotation(viewModel.pin!)
    }
    
    func displayGoogleMapItem(viewModel: Detail.MapItem.ViewModel) {
        let mapItem = viewModel.mapItem
        mapItem!.openInMaps(launchOptions: [MKLaunchOptionsDirectionsModeKey: MKLaunchOptionsDirectionsModeDriving])
    }
}

extension DetailViewController: MKMapViewDelegate, CLLocationManagerDelegate {
    
    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {
        let request = Detail.Location.Request(locations: locations)
        interactor?.fetchLocation(request: request)
    }
    
    func locationManager(_ manager: CLLocationManager, didFailWithError error: Error) {
            print("Error - locationManager: \(error.localizedDescription)")
    }
}


