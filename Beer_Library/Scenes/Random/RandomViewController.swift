//
//  RandomViewController.swift
//  Beer_Library
//
//  Created by Vitalina Nazaruk on 22.03.2023.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Kingfisher
import MapKit

protocol RandomDisplayLogic: AnyObject {
    func displayRandomBeer(viewModel: Random.ShowDetails.ViewModel)
    func displayFavoriteButtonStatus(viewModel: Random.SetFavoriteStatus.ViewModel)
}

class RandomViewController: UIViewController, RandomDisplayLogic {
    var interactor: RandomBusinessLogic?
    var router: (NSObjectProtocol & RandomRoutingLogic & RandomDataPassing)?

    // MARK: Object lifecycle
  
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
  
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
  
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = RandomInteractor()
        let presenter = RandomPresenter()
        let router = RandomRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
  
    // MARK: Routing
  
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
  
    // MARK: View lifecycle
  
    override func viewDidLoad() {
        super.viewDidLoad()
        

    }
    override func viewWillAppear(_ animated: Bool) {
        fetchRandomBeer()
        print("Override \(fetchRandomBeer())")
    }
  
    // MARK: Random IBOutlets & IBActions
  
    @IBOutlet weak var imageBeer: UIImageView!
    @IBOutlet weak var nameBeer: UILabel!
    @IBOutlet weak var yearBeer: UILabel!
    @IBOutlet weak var taglineBeer: UILabel!
    @IBOutlet weak var descriptionBeer: UILabel!
    @IBOutlet weak var mapView: MKMapView!
    @IBOutlet weak var favoriteButton: UIBarButtonItem!
    
    @IBAction func tapRandomButton(_ sender: UIButton) {
        fetchRandomBeer()
        print("tapped \(fetchRandomBeer())")
    }
    
    @IBAction func toggleFavoriteButton(_ sender: UIBarButtonItem) {
        interactor?.setFavoriteStatus()
    }
    
    @IBAction func tapGetDirectionButton(_ sender: UIButton) {
    }
    
    // MARK: Fetch Random Details
    
    func fetchRandomBeer() {
        let request = Random.ShowDetails.Request()
        interactor?.fetchRandomBeer(request: request)
    }
  
    func displayRandomBeer(viewModel: Random.ShowDetails.ViewModel) {
        nameBeer.text = viewModel.name
        yearBeer.text = viewModel.first_brewed
        taglineBeer.text = viewModel.tagline
        descriptionBeer.text = viewModel.description
        imageBeer.kf.setImage(with: URL(string: viewModel.image_url))
       // favoriteButton.image = viewModel.isFavorite ? UIImage(systemName: "star.fill") : UIImage(systemName: "star")
        title = viewModel.name
    }
    
    func displayFavoriteButtonStatus(viewModel: Random.SetFavoriteStatus.ViewModel) {
        favoriteButton.image = viewModel.isFavorite ? UIImage(systemName: "star.fill") : UIImage(systemName: "star")
    }
}
