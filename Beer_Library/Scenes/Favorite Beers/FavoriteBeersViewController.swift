//
//  FavoriteBeersViewController.swift
//  Beer_Library
//
//  Created by Vitalina Nazaruk on 12.04.2023.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Kingfisher

protocol FavoriteBeersDisplayLogic: AnyObject {
    func displayFavoriteBeers(viewModel: FavoriteBeers.Show.ViewModel)
    func displayBeersAscending(viewModel: FavoriteBeers.Show.ViewModel)
    func displayBeersDescending(viewModel: FavoriteBeers.Show.ViewModel)
}

class FavoriteBeersViewController: UITableViewController, FavoriteBeersDisplayLogic {

    var interactor: FavoriteBeersBusinessLogic?
    var router: (NSObjectProtocol & FavoriteBeersRoutingLogic & FavoriteBeersDataPassing)?

    // MARK: Object lifecycle
  
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
  
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
  
    // MARK: Setup
  
    private func setup() {
        let viewController = self
        let interactor = FavoriteBeersInteractor()
        let presenter = FavoriteBeersPresenter()
        let router = FavoriteBeersRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
  
    // MARK: Routing
  
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
  
    // MARK: View lifecycle
  
    override func viewDidLoad() {
        super.viewDidLoad()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        fetchBeers()
        tableView.reloadData()
    }
    
    // MARK: Fetch Favorite Beers
    
    var displayedBeers: [FavoriteBeers.Show.ViewModel.DisplayedBeer] = []
    
    func fetchBeers() {
        let request = FavoriteBeers.Show.Request()
        interactor?.fetchBeers(request: request)
    }
  
    func displayFavoriteBeers(viewModel: FavoriteBeers.Show.ViewModel) {
        self.displayedBeers = viewModel.displayedBeers
    }
    
    // MARK: Filter Button
    
    @IBAction func tapFilterButton(_ sender: UIBarButtonItem) {
        let ac = UIAlertController(title: "SORT BY DATE", message: nil, preferredStyle: .actionSheet)
        ac.addAction(UIAlertAction(title: "Ascending", style: .default, handler: { (action) -> Void in
            self.sortAscending()
            self.tableView.reloadData()
        }))
        ac.addAction(UIAlertAction(title: "Descending", style: .default, handler: { (action) -> Void in
            self.sortDescending()
            self.tableView.reloadData()
        }))
        ac.addAction(UIAlertAction(title: "Cancel", style: .cancel))
        self.present(ac, animated: true, completion: nil)
    }
    
    func sortAscending() {
        interactor?.sortBeersAscending()
    }
    
    func sortDescending() {
        interactor?.sortBeersDescending()
    }
    
    func displayBeersAscending(viewModel: FavoriteBeers.Show.ViewModel) {
        self.displayedBeers = viewModel.displayedBeers
    }
    
    func displayBeersDescending(viewModel: FavoriteBeers.Show.ViewModel) {
        self.displayedBeers = viewModel.displayedBeers
    }
    
    // MARK: Table view
    
    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return displayedBeers.count
    }
    
    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let displayedBeer = displayedBeers[indexPath.row]
        guard let cell = tableView.dequeueReusableCell(withIdentifier: "Cell", for: indexPath) as? FavoriteTableViewCell else { fatalError() }
        cell.name.text = displayedBeer.name
        cell.year.text = displayedBeer.year
        cell.beerImage.kf.setImage(with: URL(string: displayedBeer.image))
        return cell
    }
    
    override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        router?.routeToDetail(segue: nil)
    }
}
