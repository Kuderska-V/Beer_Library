//
//  ListViewController.swift
//  Beer_Library
//
//  Created by Vitalina Nazaruk on 14.03.2023.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Kingfisher

protocol ListDisplayLogic: AnyObject {
    func displayBeers(viewModel: List.ShowBeers.ViewModel)
}

class ListViewController: UITableViewController, ListDisplayLogic, UISearchBarDelegate {
    var interactor: ListBusinessLogic?
    var router: (NSObjectProtocol & ListRoutingLogic & ListDataPassing)?

    // MARK: Object lifecycle
  
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
  
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
  
    // MARK: Setup
  
    private func setup() {
        let viewController = self
        let interactor = ListInteractor()
        let presenter = ListPresenter()
        let router = ListRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
        
    }
  
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
  
    // MARK: View lifecycle
  
    override func viewDidLoad() {
        super.viewDidLoad()
        fetchBeers()
        setupSearchBar()
    }
    
    func setupSearchBar() {
        searchBar.delegate = self
        tableView.dataSource = self
    }

    // MARK: List IBOutlets & IBActions
    
    @IBOutlet weak var searchBar: UISearchBar!
  
    // MARK: Fetch Beers
  
    var displayedBeers: [List.ShowBeers.ViewModel.DisplayedBeer] = []
    
    func fetchBeers() {
        let request = List.ShowBeers.Request(text: nil)
        interactor?.fetchBeers(request: request)
    }
  
    func displayBeers(viewModel: List.ShowBeers.ViewModel) {
        self.displayedBeers = viewModel.displayedBeers
        self.tableView.reloadData()
    }
    
    // MARK: Table view
    
    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return displayedBeers.count
    }
    
    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let displayedBeer = displayedBeers[indexPath.row]
        guard let cell = tableView.dequeueReusableCell(withIdentifier: "Cell", for: indexPath) as? BeerTableViewCell else {
            fatalError()
        }
        cell.name.text = displayedBeer.name
        cell.year.text = displayedBeer.year
        cell.beerImage.kf.setImage(with: URL(string: displayedBeer.image))
        return cell
    }
    
    override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        router?.routeToDetail(segue: nil)
    }
    // MARK: UISearchBarDelegate
    
    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {
        if !searchText.isEmpty {
            let request = List.ShowBeers.Request(text: searchBar.text)
            interactor?.fetchFilteredBeers(request: request)
        } else {
            fetchBeers()
        }
    }
}



